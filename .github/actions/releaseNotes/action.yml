name: 'Collect release notes'

inputs:
  token:
    description: 'Github access token'
    default: ${{ github.token }}
  repository:
    description: 'Repository'
    default: ${{ github.repository }}
  title:
    description: 'Release notes title'
    default: Release notes
  jiraRegex:
    description: 'Regex for finding Jira issues'
    default: CMS-[0-9]{3,10}

runs:
  using: "composite"
  steps:
    - name: Summary
      shell: pwsh
      run: |
        $currentBranch = (git rev-parse --abbrev-ref HEAD)
        $latestCommitId = (git rev-parse --short HEAD)
        $currentTime = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss")

        $releaseNotes = "Build from $currentBranch ($latestCommitId)`n`n"
        $releaseNotes += "Created at $currentTime UTC`n`n"

        $compareCommit = Invoke-Expression "git describe --tags --abbrev=0"
        if (-not $compareCommit) {
            throw "No previous tag found to compare commits from."
        }

        $gitLogCommand = "git log --no-merges --oneline HEAD --not $compareCommit"
        $gitLogs = (Invoke-Expression $gitLogCommand)

        $releaseNotes += "# Changes`n`n"

        #foreach ($logLine in $gitLogs) {
        #    $commitId = ($logLine -split " ")[0]
        #    $commitMessage = (git log --format=%B -n 1 $commitId)
        #    $jiraTasks = Select-String -Pattern '${{ inputs.jiraRegex }}' -Input $commitMessage -AllMatches
        #    if ($jiraTasks.Matches) {
        #        $jiraTasks = $jiraTasks.Matches | ForEach-Object { "[$($_.Value)](https://jira.sso.episerver.net/browse/$($_.Value))" }
        #    }
        #    if ($jiraTasks.Count -gt 0) {
        #        $commitNotes = "- $logLine ($($jiraTasks -join ", "))`n"
        #    }
        #    else {
        #        $commitNotes = "- $logLine`n"
        #    }

        #    $releaseNotes += $commitNotes
        #}

        $headers = @{
          Authorization = "Bearer ${{ inputs.token }}"
          Accept = "application/vnd.github.v3+json"
        }
        $body = @{
            name       = "${{ inputs.title }}"
            head_sha   = "${{ github.sha }}"
            status     = "completed"
            conclusion = "neutral"
            output     = @{
                title   = "${{ inputs.title }}"
                summary = "This run completed at ``$([DateTime]::UtcNow)``"
                text    = $releaseNotes
            }
        }

        Write-Output $releaseNotes

        $null = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ inputs.repository }}/check-runs" -Method "Post" -Headers $headers -Body ($body | ConvertTo-Json)