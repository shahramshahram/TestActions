name: Create release

on:
  workflow_dispatch:
    inputs:
      increaseMinorVersion:
        type: boolean
        description: Increase minor version
        default: false
      exactVersion:
        type: string
        description: Specify version
      hotfix:
        type: boolean
        description: Hotfix
        default: false
      testEnvironment:
        type: choice
        description: Test environment
        options:
          - Test
          - Production

defaults:
  run:
    shell: powershell

jobs:
  create_release:
    name: Create release
    #runs-on: ubuntu-latest
    runs-on: windows-2022
    permissions: write-all
    outputs:
      releaseId: ${{ steps.new_release.outputs.id }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.TESTACTION_PATH }}

      - name: Version bump
        id: new_version
        run: |
          if ('${{ github.event.inputs.hotfix }}' -eq 'true') {
            $branchName = "${{ github.ref }}"
            $hotfixBranchName = ($branchName -split "/")[-2]
            $version =  ($branchName -split "/")[-1]

            if ($hotfixBranchName -ne "hotfix") {
              throw "Incorrect branch, hotfix-option requires a hotfix branch, for example hotfix/1.2.3"
            }

            ./src/buildscripts/github/runversionbump.ps1 -Version $version
            ./src/buildscripts/github/setcurrentgithubrelease.ps1 -GithubToken '${{ secrets.GITHUB_TOKEN }}' -Hotfix
          }
          else {
            if ('${{ github.event.inputs.increaseMinorVersion }}' -eq 'true') {
              ./src/buildscripts/github/setcurrentgithubrelease.ps1 -GithubToken '${{ secrets.GITHUB_TOKEN }}'
              ./src/buildscripts/github/runversionbump.ps1 -IncreaseMinorVersion
            }
            elseif ('${{ github.event.inputs.exactVersion }}') {
              $existingTag = Invoke-Expression "git tag --list 'v${{ github.event.inputs.exactVersion }}'"
              if ($existingTag) {
                  throw "${{ github.event.inputs.exactVersion }} is already released"
              }
              ./src/buildscripts/github/setcurrentgithubrelease.ps1 -GithubToken '${{ secrets.GITHUB_TOKEN }}'
              ./src/buildscripts/github/runversionbump.ps1 -Version "${{ github.event.inputs.exactVersion }}"
            }
            else {
              ./src/buildscripts/github/setcurrentgithubrelease.ps1 -GithubToken '${{ secrets.GITHUB_TOKEN }}' -ExistingRelease
            }
          }

      - name: Disable branch protection
        if: github.ref == 'refs/heads/main'
        uses: ./.github/actions/setbranchprotection
        with:
          token: ${{ secrets.TESTACTION_PATH }}
          setEnforceAdmins: 'false'

      - name: Push version bump
        id: version_bump
        run: |
          $changes = git status --porcelain
          if ($changes) {
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add */SharedAssemblyInfo.cs
            git add */PackageVersion.txt

            git commit -m "Version bump v${{ steps.new_version.outputs.version }}"
            if ($LASTEXITCODE -ne 0) {
              throw "git commit failed with: $LASTEXITCODE"
            }

            git push
            if ($LASTEXITCODE -ne 0) {
              throw "git push failed with: $LASTEXITCODE"
            }
          }
          "sha=$(git rev-parse HEAD)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "sha_short=$(git rev-parse --short HEAD)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Enable branch protection
        uses: ./.github/actions/setbranchprotection
        if: github.ref == 'refs/heads/main' && always()
        with:
          token: ${{ secrets.TESTACTION_PATH }}
          setEnforceAdmins: 'true'

      - name: Add Release notes File
        run: |
          New-Item -ItemType Directory -Path "src/buildscripts/artifacts" -Force -ErrorAction SilentlyContinue
          $releaseNotes = ./src/buildscripts/github/GetReleaseNotes.ps1 | Set-Content -Path "src/buildscripts/artifacts/ReleaseNotes.txt" -Force

      - name: Release notes
        uses: ./.github/actions/releaseNotes

      - name: Create Jira release
        run: src/buildscripts/github/SetJiraRelease.ps1 -Username '${{ secrets.JIRA_USERNAME }}' -Password '${{ secrets.JIRA_PASSWORD }}' -DefaultPackage 'TESTACTION.SAAS' -Version '${{ steps.new_version.outputs.version }}' -PreVersion '${{ steps.version_bump.outputs.sha_short }}'

      - name: Create Github Release
        id: new_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: v${{ steps.new_version.outputs.version }}
          commitish: ${{ steps.version_bump.outputs.sha }}
          body_path: src/buildscripts/artifacts/ReleaseNotes.txt
          draft: true
          prerelease: false